http://camel.465427.n5.nabble.com/Camel-Aggregator-Strategy-Question-td5729337.html
https://www.google.com/search?q=org.apache.camel.CamelExchangeException%3A+Invalid+correlation+key&oq=org.apache.camel.CamelExchangeException%3A+Invalid+correlation+key&aqs=chrome.0.69i57.433j0&sourceid=chrome&ie=UTF-8
http://labs.bsb.com/2011/04/jdbc-persistence-for-camel-aggregator/

http://camel.apache.org/aggregator2.html

http://camel.apache.org/simple.html
http://camel.apache.org/file-language.html


http://fusesource.com/docs/router/2.4/eip/MsgRout-Aggregator.html

onException(IllegalArgumentException.class).useOriginalMessage().to("file://target/failed/error"); 
from("file://target/failed?delete=true") .... 


http://tmielke.blogspot.ie/2009/01/using-camel-aggregator-correctly.html



















package hmh.services.scm_services.routes;

import hmh.services.scm_services.common.SCMEaiLogUtil;
import hmh.services.scm_services.common.SFAAggregationStrategy;
import hmh.services.scm_services.mapping.MaterialClassificationSFAMapping;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.List;
import java.util.Map;

import org.apache.camel.Endpoint;
import org.apache.camel.Exchange;
import org.apache.camel.Expression;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.builder.xml.Namespaces;
import org.apache.camel.builder.xml.XPathBuilder;
import org.apache.camel.converter.jaxb.JaxbDataFormat;
import org.apache.camel.language.simple.SimpleLanguage;
import org.apache.log4j.Logger;
 
import com.hmco.schemas.sfa.material_classification.MaterialClassification;
import com.hmh.util.dao.EAI_Log;
import com.tibco.xmlns.ae2xsd._2002._05.ae._620.basic.idocs.ISMMATMAS03ZISMMATMAS034X;

public class MaterialClassificationUpdateSFARouteBuilder extends RouteBuilder
{
	private String idocJaxbFormat 	= "com.tibco.xmlns.ae2xsd._2002._05.ae._620.basic.idocs";
	private String sfaJaxbFormat	= "com.hmco.schemas.sfa.material_classification";
	private String nameSpace		= "http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/620/basic/IDOCS";
	private String endPoint 		= "ref:tibSAPMaterialClassificationSFAUpdateCamel";
	private String xPathInput		= "EAIMessage/ns:ISM__MATMAS03-ZISM__MATMAS03-4x";
	private MaterialClassificationSFAMapping mappingBean	= new MaterialClassificationSFAMapping();

	private static final Logger logger = Logger.getLogger(MaterialClassificationUpdateSFARouteBuilder.class);
	protected static final String HEADER_PAY_LOAD = "payLoad";
	private SCMEaiLogUtil eaiLogUtil;
	private EAI_Log log = null;
	private String fileNm;
	private String workingDir;
	private String outputDir;
	private String errorDir;
	
	private StringBuilder consolidated = new StringBuilder();
	
	//EBS Name = Source + Process Name + Destination
	protected static final String EBS_NAME = "SAPMaterialClassificationUpdateSFA";
		
	@Override
	public void configure() throws Exception {
		
		JaxbDataFormat idocJaxb = new JaxbDataFormat(idocJaxbFormat);				
		JaxbDataFormat sfaJaxb 	= new JaxbDataFormat(sfaJaxbFormat);
		final Namespaces ns 	= new Namespaces("ns", nameSpace);
        Endpoint tibSAPMaterialClassificationUpdateCamel = getContext().getEndpoint(endPoint);
		
		from(tibSAPMaterialClassificationUpdateCamel)
		.doTry()
	    	.process(new Processor() {
	    		public void process(Exchange exchange) throws Exception {
	    			String body = (String) exchange.getIn().getBody(String.class);	
	    			logger.trace("MaterialClassificationUpdateSFA Input XML : "+body);
	    			
	    			String nodeValue = XPathBuilder
	    								.xpath(xPathInput)
	    								.namespaces(ns)
	    								.evaluate(getContext(), body, String.class);
	
	    			exchange.getIn().setBody(nodeValue);
	    		}
	    	})			
	    	.unmarshal(idocJaxb)
	    	.process(new Processor() {
				public void process(Exchange exchange) throws Exception {
					
					ISMMATMAS03ZISMMATMAS034X idoc = exchange.getIn().getBody(ISMMATMAS03ZISMMATMAS034X.class);
					String idocNo = idoc.getEDIDC().getValue().getDOCNUM().getValue();
					
					logger.debug("IDOC Number : " + idocNo);
					
					log = EAI_Log.enter(idocNo, EBS_NAME, EAI_Log.SYS_SAP, EAI_Log.SYS_SFA, EAI_Log.COMP_Legacy_Consumer);
					eaiLogUtil.sendToEaiLog(log);
				}
	   		})
	   		.bean(mappingBean)
	   		.marshal(sfaJaxb)
	    	.process(new Processor() {
	    		public void process(Exchange exchange) throws Exception {
	    			
	    			String body = (String) exchange.getIn().getBody(String.class);
	    			exchange.getIn().setHeader(HEADER_PAY_LOAD, body);
	    			MaterialClassification mappingBean = exchange.getIn().getBody(MaterialClassification.class);
	    			exchange.getIn().setHeader("pravee", simple("true"));
	    			logger.debug("MaterialClassificationUpdateSFA Output XML : "+body);
	    			
	    			if(mappingBean==null || mappingBean.getClassification()==null
	    					|| mappingBean.getClassification().size()==0) {
	    				log.toFilter();
	    			}else{ 
//        				centralDBUtil.classificationUpsert(body, mappingBean);
        				log.toExit();
	    			}
	    			eaiLogUtil.sendToEaiLog(log);
	    		}        		
	    	})
	    	.convertBodyTo(String.class)
	    	.to("file:"+outputDir+"?autoCreate=true&fileName="+fileNm+"${date:now:yyyyMMddHHmmssSSS}.dat")
	    .doCatch(Throwable.class)
		    .process(new Processor() {
				@Override
				public void process(Exchange exchange) throws Exception {
					Throwable ex = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class);
					
					
					logger.error(EBS_NAME+" : Exception Occured. Exception is : "+ex.getMessage(), ex);

    				StringWriter sw = new StringWriter();
    				ex.printStackTrace(new PrintWriter(sw));
					
					String err = sw.toString().toLowerCase();
					String errorType = EAI_Log.EXEPTION_BUSINESS;
					if( err.contains("jdbc") && !err.contains("unique constraint")){
						errorType = EAI_Log.EXEPTION_SYSTEM;
					}
					
					log.toException((String)exchange.getIn().getHeader(HEADER_PAY_LOAD), ex.getMessage(), errorType, sw.toString());
					eaiLogUtil.sendToEaiLog(log);
				}
			})
    	.end();
		
		//1 Min = 60000 Milliseconds
		/*from("file:"+outputDir+"?maxMessagesPerPoll=25&delay=60000&autoCreate=true&delete=true&moveFailed=error")
		.doTry()
		.process(new Processor() {
			  public void process(Exchange exchange) throws Exception {
				  consolidated.append(exchange.getIn().getBody(String.class));
			  }
			})
		.doCatch(Throwable.class)
			.process(new Processor() {
				@Override
				public void process(Exchange exchange) throws Exception {
					
					 * TODO
					 
				}
			})
		.doFinally()
			.process(new Processor() {
				@Override
				public void process(Exchange exchange) throws Exception {
					
					System.out.println("1111111111111"+consolidated.toString());
					exchange.getIn().setBody(consolidated.toString());
					consolidated.delete(0, consolidated.length());
					consolidated.trimToSize();
					System.out.println("22222222222222");
					System.out.println(consolidated.toString());
					System.out.println("3333333333333");
				}
			})
			.to("file:"+workingDir+"?autoCreate=true&fileName=matrclas_sfa_${date:now:yyyyMMdd}_${date:now:HHmmss}.dat")
		.end();*/
		
		
//		from("file:"+outputDir+"?maxMessagesPerPoll=25&delay=60000&autoCreate=true&delete=true&moveFailed="+errorDir)
//		from("file:"+outputDir+"?maxMessagesPerPoll=25&delay=60000&autoCreate=true&moveFailed="+errorDir)
		from("file:"+outputDir+"?delay=60000&delete=true")
		.process(new Processor() {
				@Override
				public void process(Exchange exchange) throws Exception {
					System.out.println("XXXXXXXXXXXXXXXXXXXXXXXXXXXXX"+exchange.getIn().getBody(String.class));
					
					
				}
			})
//		.aggregate(new SimpleLanguage().createExpression("file:name.ext"), new SFAAggregationStrategy())
		.aggregate(new SimpleLanguage().createExpression("file:name.ext"))
		.completionFromBatchConsumer()
		.groupExchanges()
		.process(new Processor() {
				@Override
				public void process(Exchange exchange) throws Exception {
					List<Exchange> grouped = exchange.getProperty(Exchange.GROUPED_EXCHANGE, List.class);
					MaterialClassification matClass = new MaterialClassification();
					matClass.setFileName("Target_sfa.xml");
					for(Exchange ex : grouped){
						System.out.println("=====> "+ex.getIn().getBody(String.class));
						MaterialClassification mappingBean = ex.getIn().getBody(MaterialClassification.class);
						matClass.getClassification().addAll(mappingBean.getClassification());
					}
					exchange.getIn().setBody(matClass);
				}
			})
//		.groupExchanges()
//		.ignoreInvalidCorrelationKeys()
//		.completionSize(10)
//		.completionFromBatchConsumer()
			.convertBodyTo(String.class)
		.to("file:"+workingDir+"?autoCreate=true&fileName=matrclas_sfa_${date:now:yyyyMMdd}_${date:now:HHmmss}.dat")
		.end();
		
	}//End of Configure
	
	public void setEaiLogUtil(SCMEaiLogUtil eaiLogUtil) {
		this.eaiLogUtil = eaiLogUtil;
	}
	public void setFileNm(String fileNm) {
		this.fileNm = fileNm;
	}
	public void setWorkingDir(String workingDir) {
		this.workingDir = workingDir;
	}
	public void setOutputDir(String outputDir) {
		this.outputDir = outputDir;
	}
	public void setErrorDir(String errorDir) {
		this.errorDir = errorDir;
	}
	
}//End of Class



http://stackoverflow.com/questions/15408268/camel-2-10-3-version-in-fuse
https://access.redhat.com/site/documentation/en-US/Fuse_ESB_Enterprise/7.1/html/Release_Notes/files/Patch711.html




 1st Set
 
 Start Date & Time ======> Tue Aug 20 12:39:51 IST 2013
						   Tue Aug 20 12:39:54 IST 2013
						   
2nd Set

Date & Time ======> Tue Aug 20 12:40:55 IST 2013
Completed Date & Time ======> Tue Aug 20 12:40:57 IST 2013


3rd Set
Date & Time ======> Tue Aug 20 12:41:58 IST 2013
Completed Date & Time ======> Tue Aug 20 12:41:59 IST 2013


In Tibco No Restriction on the messages needs to be polled 
Max file size of a baby file may not be more than 10 KB						   


10,000
Date & Time ======> Tue Aug 20 13:07:13 IST 2013
Completed Date & Time ======> Tue Aug 20 13:08:08 IST 2013


1 Lakh
Date & Time ======> Tue Aug 20 13:41:24 IST 2013

10K Batch
1st
Date & Time ======> Tue Aug 20 14:04:05 IST 2013
Completed Date & Time ======> Tue Aug 20 14:06:22 IST 2013

2nd
Date & Time ======> Tue Aug 20 14:12:52 IST 2013
Completed Date & Time ======> Tue Aug 20 14:15:34 IST 2013


2013-05-29T03:45:00.144-04:002877474
2013-08-23T15:35:24.448+05:30ID-PC177262-61456-1377252135645-1-233